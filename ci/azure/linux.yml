parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}Test

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    AZURECI: 1
    PYTHONHASHSEED: "random"

    BACKENDS_SQL_PARQUET: "mysql postgres sqlite parquet"
    BACKENDS_IMPALA_KUDU_CLICKHOUSE: "impala kudu-master kudu-tserver clickhouse"
    BACKENDS_OMNISCI: "omniscidb"
    BACKENDS_SPARK: ""

    CONTAINERS_SQL_PARQUET: "postgres mysql"
    CONTAINERS_IMPALA_KUDU_CLICKHOUSE: "impala clickhouse kudu-master kudu-tserver"
    CONTAINERS_OMNISCI: "omniscidb"
    CONTAINERS_SPARK: ""

    DEPS_SQL_PARQUET: "sqlalchemy>=1.1 pymysql psycopg2 pyarrow>=0.13"
    DEPS_IMPALA_KUDU_CLICKHOUSE: "sqlalchemy>=1.1 requests impyla>=0.15.0 thrift>=0.9.3 thriftpy2 clickhouse-cityhash clickhouse-driver>=0.1.3 clickhouse-sqlalchemy lz4"
    DEPS_OMNISCI: "pymapd=0.23"
    DEPS_SPARK: "pyspark>=2.4.3"
    DEPS_BIGQUERY: "google-api-core=1.17.0 google-cloud-bigquery>=1.0.0 pydata-google-auth"
    DEPS_GEO: "geoalchemy2 geopandas shapely"

    PYTEST_MARK_EXPRESSION_SQL_PARQUET: "not udf and not clickhouse and not impala and not kudu and not hdfs and not omniscidb and not spark and not pyspark"
    PYTEST_MARK_EXPRESSION_IMPALA_KUDU_CLICKHOUSE: "not udf and not mysql and not parquet and not postgresql and not postgis and not postgres_extensions and not sqlite and not omniscidb and not spark and not pyspark"
    PYTEST_MARK_EXPRESSION_OMNISCI: "not udf and not clickhouse and not impala and not kudu and not hdfs and not mysql and not parquet and not postgresql and not postgis and not postgres_extensions and not sqlite and not pyspark and not spark"
    PYTEST_MARK_EXPRESSION_SPARK: "not udf and not clickhouse and not impala and not kudu and not hdfs and not mysql and not parquet and not postgresql and not postgis and not postgres_extensions and not sqlite and not omniscidb"
  strategy:
    matrix:

      # SQL and parquet backends
      py36_sql_parquet:
        PYTHON_VERSION: "3.6"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_SQL_PARQUET)
        BACKENDS: $(BACKENDS_SQL_PARQUET)
        DEPS: $(DEPS_SQL_PARQUET)
        CONTAINERS_TO_START: $(CONTAINERS_SQL_PARQUET)
      py37_sql_parquet:
        PYTHON_VERSION: "3.7"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_SQL_PARQUET)
        BACKENDS: $(BACKENDS_SQL_PARQUET)
        DEPS: $(DEPS_SQL_PARQUET)
        CONTAINERS_TO_START: $(CONTAINERS_SQL_PARQUET)
      py38_sql_parquet:
        PYTHON_VERSION: "3.8"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_SQL_PARQUET)
        BACKENDS: $(BACKENDS_SQL_PARQUET)
        DEPS: $(DEPS_SQL_PARQUET)
        CONTAINERS_TO_START: $(CONTAINERS_SQL_PARQUET)

      # Impala, kudu and clickhouse backends
      py36_impala_kudu_clickhouse:
        PYTHON_VERSION: "3.6"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_IMPALA_KUDU_CLICKHOUSE)
        BACKENDS: $(BACKENDS_IMPALA_KUDU_CLICKHOUSE)
        DEPS: $(DEPS_IMPALA_KUDU_CLICKHOUSE)
        CONTAINERS_TO_START: $(CONTAINERS_IMPALA_KUDU_CLICKHOUSE)
      py37_impala_kudu_clickhouse:
        PYTHON_VERSION: "3.7"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_IMPALA_KUDU_CLICKHOUSE)
        BACKENDS: $(BACKENDS_IMPALA_KUDU_CLICKHOUSE)
        DEPS: $(DEPS_IMPALA_KUDU_CLICKHOUSE)
        CONTAINERS_TO_START: $(CONTAINERS_IMPALA_KUDU_CLICKHOUSE)
      py38_impala_kudu_clickhouse:
        PYTHON_VERSION: "3.8"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_IMPALA_KUDU_CLICKHOUSE)
        BACKENDS: $(BACKENDS_IMPALA_KUDU_CLICKHOUSE)
        DEPS: $(DEPS_IMPALA_KUDU_CLICKHOUSE)
        CONTAINERS_TO_START: $(CONTAINERS_IMPALA_KUDU_CLICKHOUSE)

      # Omnisci backend
      py36_omnisci:
        PYTHON_VERSION: "3.6"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_OMNISCI)
        BACKENDS: $(BACKENDS_OMNISCI)
        DEPS: $(DEPS_OMNISCI)
        CONTAINERS_TO_START: $(CONTAINERS_OMNISCI)
      py37_omnisci:
        PYTHON_VERSION: "3.7"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_OMNISCI)
        BACKENDS: $(BACKENDS_OMNISCI)
        DEPS: $(DEPS_OMNISCI)
        CONTAINERS_TO_START: $(CONTAINERS_OMNISCI)
      # TODO: pymapd is not working on Ibis with Python 3.8, so not added to the matrix yet
      # https://github.com/ibis-project/ibis/issues/2090

      # PySpark and Spark backends
      py36_pyspark_spark:
        PYTHON_VERSION: "3.6"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_SPARK)
        BACKENDS: $(BACKENDS_SPARK)
        DEPS: $(DEPS_SPARK)
      py37_pyspark_spark:
        PYTHON_VERSION: "3.7"
        PYTEST_MARK_EXPRESSION: $(PYTEST_MARK_EXPRESSION_SPARK)
        BACKENDS: $(BACKENDS_SPARK)
        DEPS: $(DEPS_SPARK)
      # TODO: pyspark is not working on Ibis with Python 3.8, so not added to the matrix yet
      # https://github.com/ibis-project/ibis/issues/2091

  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)

    - bash: |
        if [ -z "$PYTEST_MARK_EXPRESSION" ]; then
          echo "##vso[task.logissue type=error]The env variable PYTEST_MARK_EXPRESSION is not set. It is expected to be set in all the matrix builds, since not all tests can be run in a single build. It's probably caused by a typo."
          exit 1
        fi
      displayName: 'Check the pytest mark expressions are correctly set'

    - bash: ./ci/start_backend_containers.sh $CONTAINERS_TO_START
      displayName: 'Start backend containers'

    - bash: |
        ./ci/setup_env.sh $PYTHON_VERSION
        conda install $DEPS
      displayName: 'Set up environment'

    - bash: |
        if [ -n "${GCLOUD_SERVICE_KEY}" ]; then
          mkdir -p /tmp/ibis
          base64 --decode --ignore-garbage <<< "${GCLOUD_SERVICE_KEY}" > /tmp/ibis/gcloud-service-key.json
        fi
      env:
        GCLOUD_SERVICE_KEY: $(GCLOUD_SERVICE_KEY)
      displayName: 'Setup BigQuery credentials'
      condition: eq(variables['System.PullRequest.IsFork'], 'False')

    - bash: |
        echo "PYTEST_MARK_EXPRESSION: ${PYTEST_MARK_EXPRESSION}"
        export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcloud-service-key.json"
        pytest ibis -m "${PYTEST_MARK_EXPRESSION}" \
                    -ra \
                    --numprocesses auto \
                    --doctest-modules \
                    --doctest-ignore-import-errors \
                    -k"-compile -connect" \
                    --junitxml=/tmp/junit.xml \
                    --cov=ibis \
                    --cov-report=xml:/tmp/coverage.xml
      displayName: 'Run tests'

    # See #1954
    # - bash: |
    #     bash <(curl -s https://codecov.io/bash) \
    #       -f /tmp/coverage.xml
    #   displayName: 'Upload coverage'

    - task: PublishTestResults@2
      displayName: 'Publish test results from pytest JUnitXML'
      inputs:
        testResultsFiles: /tmp/junit.xml
        testRunTitle: 'Publish test results'
        mergeTestResults: False
      condition: succeededOrFailed()  # pass or fail, but not cancelled


- job: Lint_and_build_conda_forge_package
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: "3.7"

    - bash: ./ci/setup_env.sh
      displayName: 'Set up environment'

    - bash: flake8 .
      displayName: 'Lint'

    - bash: mypy ibis
      displayName: "Type checks"

    # TODO: change match-dir when docstrings are fixed for other backends
    - bash: pydocstyle --match-dir="(ibis|omniscidb)"
      displayName: "Docstring check"

    - bash: pre-commit run --all-files
      displayName: 'Ensure all pre-commit hooks checking are passing.'

    - bash: ./ci/feedstock.py test --python 3.7
      displayName: 'Clone, update and build conda-forge recipe'

    - task: PublishPipelineArtifact@1
      inputs:
        path: /tmp/ibis/packages
        artifact: LinuxCondaPackage
      displayName: 'Publish conda package to Azure'
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))


- job: Benchmarks
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: "3.7"

    - bash: ./ci/setup_env.sh
      displayName: 'Set up environment'

    - bash: |
        source activate ibis-dev
        ./ci/benchmark.sh azure "$(Build.SourceVersion)"
      displayName: 'Run Benchmark (ASV)'


- job: Documentation
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    CONTAINERS_TO_START: "impala postgres"

  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: "3.7"

    - bash: ./ci/start_backend_containers.sh $CONTAINERS_TO_START
      displayName: 'Start backend containers'

    - bash: |
        ./ci/setup_env.sh
        conda install --file=ci/requirements-docs.yml
      displayName: 'Set up environment'

    - bash: |
        source activate ibis-dev
        mkdir ibis-project.org
        echo "ibis-project.org" > ibis-project.org/CNAME
        touch ibis-project.org/.nojekyll
        python -m pysuerga /ibis/docs/web --target-path=ibis-project.org/
        sphinx-build -b html docs/source ibis-project.org/docs -W -T --keep-going
      displayName: 'Build website and docs'

    - task: PublishPipelineArtifact@1
      inputs:
        path: ibis-project.org
        artifact: Documentation
      displayName: 'Publish documentation to Azure'
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))

    - bash: |
        mkdir ~/.ssh
        base64 --decode --ignore-garbage <<< "${IBIS_GH_TOKEN}" > ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
      displayName: 'Set up ssh'
      env:
        IBIS_GH_TOKEN: $(IBIS_GH_TOKEN)
      condition: |
        and(eq(variables['System.PullRequest.IsFork'], 'False'),
            eq(variables['Build.Repository.Name'], 'ibis-project/ibis'),
            eq(variables['Build.SourceBranchName'], 'master'))

    - bash: |
        cd ibis-project.org

        git init
        git checkout -b gh-pages
        git remote add origin git@github.com:ibis-project/docs.ibis-project.org
        git config user.name 'Ibis Documentation Bot'
        git config user.email ''

        git add --all .
        git commit -m "Docs from ibis at $(Build.SourceVersion)"
        git push --force origin gh-pages
      displayName: 'Push web to remote repo'
      condition: |
        and(eq(variables['System.PullRequest.IsFork'], 'False'),
            eq(variables['Build.Repository.Name'], 'ibis-project/ibis'),
            eq(variables['Build.SourceBranchName'], 'master'))
