name: Main

on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  Tests_pandas:
    name: Tests pandas
    runs-on: ubuntu-latest
    env:
      BACKENDS: "pandas csv parquet hdf5"
    strategy:
      matrix:
        python_version: ["3.7", "3.8"]
    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.pytest_version }}" "$BACKENDS"

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS PYTEST_EXPRESSION="not udf" ./ci/run_tests.sh

  Tests_sql:
    name: Tests SQL
    runs-on: ubuntu-latest
    env:
      BACKENDS: "postgres mysql sqlite"
    strategy:
      matrix:
        python_version: ["3.7", "3.8"]
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ''
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mysql:
        image: mariadb:10.4.12
        ports:
          - 3307:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 1
          MYSQL_DATABASE: ibis_testing
          MYSQL_USER: ibis
          MYSQL_PASSWORD: ibis
    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.pytest_version }}" "$BACKENDS"

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS PYTEST_EXPRESSION="not udf" ./ci/run_tests.sh

  Tests_impala:
    name: Tests Impala
    runs-on: ubuntu-latest
    env:
      BACKENDS: "impala"
    strategy:
      matrix:
        python_version: ["3.7", "3.8"]
    services:
      impala:
        image: ibisproject/impala:latest
        env:
          PGPASSWORD: postgres
        ports:
          # HDFS
          - 9020:9020
          - 50070:50070
          - 50075:50075
          - 8020:8020
          - 8042:8042
          # Hive
          - 9083:9083

          # Impala
          - 21000:21000
          - 21050:21050
          - 25000:25000
          - 25010:25010
          - 25020:25020
        options: --health-cmd "curl --fail tcp://impala:21050 && curl --fail tcp://impala:50070" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.pytest_version }}" "$BACKENDS"

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS ./ci/run_tests.sh

  Tests_clickhouse_bigquery:
    name: Tests Clickhouse/BigQuery
    runs-on: ubuntu-latest
    env:
      BACKENDS: "clickhouse bigquery"
    strategy:
      matrix:
        python_version: ["3.7", "3.8"]
    services:
      clickhouse:
        image: yandex/clickhouse-server:18.14
        ports:
          - 8123:8123
          - 9000:9000
    steps:
    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh "${{ matrix.pytest_version }}" "$BACKENDS"

    - name: run tests
      run: PYTEST_BACKENDS=$BACKENDS PYTEST_EXPRESSION="not udf" ./ci/run_tests.sh


  Lint_package_benchmark:
    name: Lint, package and benckmark
    runs-on: ubuntu-latest
    steps:

    - name: checkout
      uses: actions/checkout@v1

    - name: set up environment
      run: ./ci/setup_env.sh

    - name: black
      run: black --check .
      if: always()

    - name: mypy
      # TODO: mypy has errors that need to be fixed before it can be added
      run: mypy --ignore-missing-imports ibis || true
      if: always()

    - name: pydocstyle
      # TODO: change match-dir when docstrings are fixed for other backends
      run: pydocstyle --match-dir="(ibis|omniscidb)"
      if: always()

    - name: isort
      # TODO: isort has errors that need to be fixed before it can be added
      run: isort --check-only . || true
      if: always()

    - name: feedstock
      run: |
        ./ci/feedstock.py clone
        ./ci/feedstock.py update
        ./ci/feedstock.py build --python 3.7
        ./ci/feedstock.py deploy /usr/share/miniconda/conda-bld/
      if: always()

    - name: publish feedstock artifact
      uses: actions/upload-artifact@master
      with:
        name: LinuxCondaPackage
        path: /tmp/ibis/packages
      if: github.event_name == 'push'

    - name: benckmark
      run: ./ci/benchmark.sh azure "${{ github.sha }}"
      if: always()
